값이 나오면 따라다니는 용어는 평가이다.


평가(컴퓨터가 해석)를 하면 값이 나온다.
표현식은 평가가 되는것이고 문은 실행되는 것이다.
선어문은 다 표현식이 아니다.

표현식: 값으로 평가될 수 있는 문
표현식이 평가되면 값을 생성하거나 값을 참조한다(무조건 값을 생성하는 것은 아니다)
ex) var x = 1 ; x가 값을 생성한 것은 아니지만, 1을 참조하였기 때문에 표현식이 된다

*모든 식별자는 표현식이 된다 / 식별자는 값을 참조하기 때문에



1+2 ; 는 문이자 식(값을 만들어내기 때문에)

값을 생성하는 방법중에 가장 간단한 방법이 리터럴이다.
* 리터럴 : 다양한 값을 만들어내는 표기법 


[숫자타입]
자바스크립트는 정수와 실수 구분하지 않으나, 모두 실수로 처리한다.

2진수 8진수 16진수 모두, 참조하면 65(10진수)로 해석해서 나온다.

Infinity : 양의무한대
-Infinity : 음의무한대
NaN : 산술 연산 불가(not-a-number)

string = `문자열`; // 백틱 (ES6) 공백문자를 그대로 받아 들여준다 
ex)
var = templelet `<ul>
		<li></li>
	         </ul>` ;

undefined 타입
var 키워드로 선언했을때만 undefined(원시값)로 초기화 된다.

객체(하나를 바꾸면 다른부분도 영향을 받는다)타입
객체는 위험하다
객체가 기억하는 곳은 주소값이 들어있다 .
원시값은 값자체가 들어있다.


원시값과 객체의 차이 ?  

 
원시값뒤에 점을 붙히면 객체로 인식한다
     (원시값)
ex) 'strong'.length -> 6

데이타타입(값의종류)의 필요성 [ 모든값은 종류가 있다]
1. 메모리공간의 확보를 위해
2. 

 
*자바스크립은 동적타입 언어이다. / 변수의 타입은 할당되는 값에 의해 결정된다.
코딩이 간편하다는 장점이 있다.



*정적타입언어는 변수가 타입을 가지고 있다.
정적타입언어는 메모리를 효율적으로 사용할 수 있으나 문법이 어렵다.
타입체킹을 통해 에러를 체크할 수 있다


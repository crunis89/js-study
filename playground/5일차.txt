[*for문을 사용할때는 순회할때 for 문을 쓴다.]


타입변환

개발자가 의도적으로 값의 타임을 변환하는 것을 명시적타입변환 또는 타입캐스팅 이라한다.
명시적타입변환이 있지만 강제적 타입변환을 명시적처럼 자주 쓴다.

var x = 10;
var str = x + '';



!0 // true


문자열 타입으로 변환
console.log(`1 + 1 = ${1 + 1}`); // "1 + 1 = 2" 


[숫자타입으로 변환]

숫자로 바꿔야 되는데 못바꿀때 NaN
+ 단항 산술 연산자를 이용하는 방법 (가장 많이 사용함)

+ 단항 산술 연산자를 이용하는 방법
// 문자열 타입 => 숫자 타입
console.log(+'0');     // 0
console.log(+'-1');    // -1
console.log(+'10.53'); // 10.53

// 불리언 타입 => 숫자 타입
console.log(+true);    // 1
console.log(+false);   // 0


[단축평가] 중요함 ! 
문자열은 ' ' 빈문자열(false)을 제외하면 다 true 임 

&& 하나라도 거짓이 있으면 안된다 둘다 참이어야 한다.
'Cat' && 'Dog' // 'Dog' 같은 경우는 캣을 평가하기 위해 도그를 봐야하는데,
도그로 참 거짓을 평가할 수 없기 때문에 뒤에있는 평가 도그를 그대로 반환한다.

'Cat' || 'Dog' // 'Cat' 
논리합(||)은 하나라도 참이면 트루로 반환한다
'' || 'Dog' // 'Dog'


[연산곱, 둘다 true 가 나오면 true]
true && true	true	둘다 true이므로 true
true && false 	false	왼쪽에서 오른쪽으로 평가가 되는데 오른쪽이 false 이므로 false
false && true	false 	첫번째가 false이므로 false

[연산합, 둘중하나라도 true 가 나오면 true]
true || true	true	둘다 true이므로 true
true || false 	false	둘중에 
false || true	false 	첫번째가 false이므로 false


삼항조건문은 if..else를 대체한다.
var done = true;
var message = '';

// if...else문
if (done) message = '완료';
else      message = '미완료';
console.log(message); // 완료

// if..else문은 삼항 조건 연산자로 대체 가능하다.
message = done ? '완료' : '미완료';
console.log(message); // 완료 


함수와 외부를 연결해 주는 것이 매개변수 
함수가 호출되면 가장 먼저 읽어준다(매개변수)


// 단축 평가를 사용한 매개변수의 기본값 설정
function getStringLength(str) {
  str = str || '';
  return str.length;
}


---------------------------------------------------------

객체 ( 다시 알아보기)
ex) Animal
	weight
	move
	type    

위와같은 것은 애니멀이라는 객체의 속성
객체는 속성의 나열로 이해.

원시 값은 변경 불가능한 값(immutable value)이지만 , 
즉 객체는 변경 가능한 값(mutable value)

객체는 상태와 동작이 있는데, 동작은 상태와 관련있는 동작이다.
객체는 객체의 상태를 나타내는 값(프로퍼티)과 프로퍼티를 참조하고
조작할 수 있는 동작(메소드)를 모두 포함할 수 있기 때문에 상태와 동작을
하나의 단위로 구조화할 수 있어 유용하다.

프로퍼티 키 : 빈 문자열을 포함하는 모든 문자열 또는 symbol 값(숫자와 불리언 x)
-값을 잘 표현할 수 있는 네이밍을 지어주어야 한다.
-네이밍 규칙에 맞치않으면 꼭 ' ' 를 해줘야한다 
ex) firstName : 'Ung-mo', // 유효한 이름
     'last-name' : 'Lee'   // 유효하지 않은 이름
-이미 존재하는 프로퍼티 키를 중복 선언하면
나중에 선언한 프로퍼티가 먼저 선언한 프로퍼티를 덮어쓴다. 
하지만 에러가 발생하지 않으므로 주의 해야한다.


[메소드]
프로퍼티 값이 함수일 경우, 일반 함수와 구분하기 위해 메소드(method)라 부른다.


[프로퍼티 접근]
// 마침표 표기법에 의한 프로퍼티 접근
console.log(person.name); // Lee

// 대괄호 표기법에 의한 프로퍼티 접근
console.log(person['name']); // Lee

*없는 프로퍼티에 접근하면 undefind가 뜬다
프로퍼티는 굳이 지울 필요가 없다 , 냅둬도 된다 


[*프로퍼티 키 축약]

// ES6
let x = 1, y = 2;
// 프로퍼티 축약 표현
const obj = { x, y };
console.log(obj); // {x: 1, y: 2} 


var 0 = { }; //빈객체도 공간을 차지한다


[원시값과 객체타입]

원시값=변경불가능한 값=그 값은 상수다

값은 못바꾸지만 변수값은 바꿀수있다 재할당을 통해 / 그래서 값과 변수를 구분해서 
생각해야 한다.


[객체복사]
객체복사에는 얕은복사 깊은복사가 있다.

var o ={
a : 1,
b: {
     c : 1
    }
};

[함수리터럴]
리터럴은 함수이름이 있어도 되고 없어도 된다. (즉 생략가능)
*함수이름은 함수 몸체 내에서만 참조할 수 있는 식별자다.

매개변수 목록은 순서에 의미가 있다 (순차)
매게변수는 함수 몸체 내에서 변수와 동일하게 취급

함수몸체는 문들이 온다 

함수 선언문과 함수리터럴을 구별할 수 있어야 한다.
함수선언문의 함수 호이스팅은 실체를 호출 및 참조까지 해준다.
(함수호이스팅은 함수객체로 초기화되기 때문에 선언문 이전에 호출해도 호출가능.
/함수객체가 먼저 생서되고 식별자에 할당까지 완료)

호출할 때는 함수객체를 가르키고 있는 식별자를 호출해야 한다

[비교 꼭 다시 이해하기]
// 이름이 있는 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석한다.
// 함수 선언문은 함수 이름을 생략할 수 없다.
function foo() { console.log('foo'); }
foo(); // foo

// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식로 해석한다.
// 함수 리터럴은 함수 이름을 생략할 수 있다.
(function bar() { console.log('bar'); });
bar(); // ReferenceError: bar is not defined

참조후에 호출한다 foo참조 ( )호출  foo( ) 참조 후 호출

